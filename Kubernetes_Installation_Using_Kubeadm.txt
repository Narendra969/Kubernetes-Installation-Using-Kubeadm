Agenda: Kubernetes Setup Using Kubeadm In AWS EC2 Ubuntu Servers Containerd As Runtime
============================================================================================================================================================

============================================================================================================================================================
# Prerequisite:
============================================================================================================================================================

3 - Ubuntu Serves

1 - Manager  (4GB RAM , 2 Core) t2.medium

2 - Workers  (1 GB, 1 Core)     t2.micro


Note: Open Required Ports In AWS Security Groups. For now we will open All trafic.
====

On Master Node:
==============

6443/tcp for Kubernetes API Server
2379-2380 for etcd server client API
6783/tcp,6784/udp for Weavenet CNI
10248-10260 for Kubelet API, Kube-scheduler, Kube-controller-manager, Read-Only Kubelet API, Kubelet health
80,8080,443 Generic Ports
30000-32767 for NodePort Services

On Slave Nodes:
==============

6783/tcp,6784/udp for Weavenet CNI
10248-10260 for Kubelet API etc
30000-32767 for NodePort Services


============================================================================================================================================================
1) Switch to root user
============================================================================================================================================================

sudo su - 

============================================================================================================================================================
2) Set Host Names
============================================================================================================================================================

hostnamectl set-hostname K8S_Master

hostnamectl set-hostname K8S_Worker1

hostnamectl set-hostname K8S_Worker2

============================================================================================================================================================
3) Turn Off Swap Space
============================================================================================================================================================

sed -i '/ swap / s/^\(.*\)$/#\1/g' /etc/fstab

============================================================================================================================================================
4) Install Containerd
============================================================================================================================================================

wget https://github.com/containerd/containerd/releases/download/v1.7.2/containerd-1.7.2-linux-amd64.tar.gz

tar Cxzvf /usr/local containerd-1.7.2-linux-amd64.tar.gz

============================================================================================================================================================
5) Containerd Service Configuration
============================================================================================================================================================

wget https://raw.githubusercontent.com/containerd/containerd/main/containerd.service

mkdir -p /usr/local/lib/systemd/system

mv containerd.service /usr/local/lib/systemd/system/containerd.service

systemctl daemon-reload

systemctl enable --now containerd

============================================================================================================================================================
6) Install Runc
============================================================================================================================================================

wget https://github.com/opencontainers/runc/releases/download/v1.1.7/runc.amd64

install -m 755 runc.amd64 /usr/local/sbin/runc

============================================================================================================================================================
7) Install CNI
============================================================================================================================================================

wget https://github.com/containernetworking/plugins/releases/download/v1.3.0/cni-plugins-linux-amd64-v1.3.0.tgz

mkdir -p /opt/cni/bin

tar Cxzvf /opt/cni/bin cni-plugins-linux-amd64-v1.3.0.tgz

============================================================================================================================================================
8) Install CRICTL
============================================================================================================================================================

VERSION="v1.27.0" # check latest version in /releases page

wget https://github.com/kubernetes-sigs/cri-tools/releases/download/v1.27.0/crictl-v1.27.0-linux-amd64.tar.gz

sudo tar zxvf crictl-v1.27.0-linux-amd64.tar.gz -C /usr/local/bin

rm -f crictl-v1.27.0-linux-amd64.tar.gz

cat <<EOF | sudo tee /etc/crictl.yaml
runtime-endpoint: unix:///run/containerd/containerd.sock
image-endpoint: unix:///run/containerd/containerd.sock
timeout: 2
debug: false
pull-image-on-create: false
EOF

============================================================================================================================================================
9) Forwarding IPv4 and letting iptables see bridged traffic
============================================================================================================================================================

cat <<EOF | sudo tee /etc/modules-load.d/k8s.conf
overlay
br_netfilter
EOF

sudo modprobe overlay

sudo modprobe br_netfilter

cat <<EOF | sudo tee /etc/sysctl.d/k8s.conf
net.bridge.bridge-nf-call-iptables = 1
net.bridge.bridge-nf-call-ip6tables = 1
net.ipv4.ip_forward = 1
EOF

sudo sysctl --system

sysctl net.bridge.bridge-nf-call-iptables net.bridge.bridge-nf-call-ip6tables net.ipv4.ip_forward

modprobe br_netfilter

sysctl -p /etc/sysctl.conf

============================================================================================================================================================
10) Install kubectl, kubelet and kubeadm
============================================================================================================================================================

apt-get update && sudo apt-get install -y apt-transport-https curl

curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key add -

cat <<EOF | sudo tee /etc/apt/sources.list.d/kubernetes.list
deb https://apt.kubernetes.io/ kubernetes-xenial main
EOF

apt update -y

apt install -y kubelet kubeadm kubectl (no need to install in kubectl in worker nodes)

sudo apt-mark hold kubelet kubeadm kubectl

============================================================================================================================================================
11) Run on Master Node and follow the instructions
============================================================================================================================================================

kubeadm config images pull

kubeadm init

# After executing kubeadm init in master node exit from root user and run below commands

mkdir -p $HOME/.kube

sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config

sudo chown $(id -u):$(id -g) $HOME/.kube/config

# To verify, if kubectl is working or not, run the following command.

kubectl get pods -o wide -n kube-system

============================================================================================================================================================
12) Install any CNI plugin. We will use weavenet apply in master only
============================================================================================================================================================

kubectl apply -f https://github.com/weaveworks/weave/releases/download/v2.8.1/weave-daemonset-k8s.yaml

============================================================================================================================================================
13) Get token from master node
============================================================================================================================================================

# Run the below command as normal user not root user because kube config file is there in normal user home directory

kubeadm token create --print-join-command

# Take the output of this command and execute in worker nodes as a root user 

Ex:
===
# Run in Slave Nodes

kubeadm join 172.31.6.30:6443 --token tj9rq1.idhpw53shycwlgo1 --discovery-token-ca-cert-hash sha256:1046e977133a08af79c1fa926a104551e171ae448b04101b979aeaf625fabadf

============================================================================================================================================================
14) Test the setup
============================================================================================================================================================

kubectl get nodes

kubectl get pods -A

============================================================================================================================================================
15) Run a demo app
============================================================================================================================================================

kubectl run nginx --image=nginx --port=80 

kubectl expose pod nginx --port=80 --type=NodePort

============================================================================================================================================================
